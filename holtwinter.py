# -*- coding: utf-8 -*-
"""「高麗菜專題五-05-10.ipynb」__holtwinter

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JlQOlSVOFo9shH6TYHdvSs00gNsc4otc
"""

import pandas as pd

# 讀取六個CSV檔案
set1 = pd.read_excel('Nantou_cabbage-108-112.xls')
weather_csv2019 = pd.read_csv('42HA10-2019-Precipitation-day.csv')
weather_csv2020 = pd.read_csv('42HA10-2020-Precipitation-day.csv')
weather_csv2021 = pd.read_csv('42HA10-2021-Precipitation-day.csv')
weather_csv2022 = pd.read_csv('42HA10-2022-Precipitation-day.csv')
weather_csv2023 = pd.read_csv('42HA10-2023-Precipitation-day.csv')

temperature_csv2019 = pd.read_csv('42HA10-2019-AirTemperature-day.csv')
temperature_csv2020 = pd.read_csv('42HA10-2020-AirTemperature-day.csv')
temperature_csv2021 = pd.read_csv('42HA10-2021-AirTemperature-day.csv')
temperature_csv2022 = pd.read_csv('42HA10-2022-AirTemperature-day.csv')
temperature_csv2023 = pd.read_csv('42HA10-2023-AirTemperature-day.csv')

weather_csv2019

temperature_csv2019

temperature_csv2019
weather_csv2019

rain_dictionary = {}

def create_rain_dic(year,df_csv):
  for i in range(0,12):
    for j in range(0,31):
      month=str(i+1)
      day=str(j+1)
      if i+1<10:
        month='0'+month
      if j+1<10:
        day='0'+day
      if(df_csv.iloc[j,i+1]=='--'):
        rain_dictionary[str(year)+'/'+month+'/'+day]=0.0
      else:
        rain_dictionary[str(year)+'/'+month+'/'+day]=float(df_csv.iloc[j,i+1])

create_rain_dic(108,weather_csv2019)
create_rain_dic(109,weather_csv2020)
create_rain_dic(110,weather_csv2021)
create_rain_dic(111,weather_csv2022)
create_rain_dic(112,weather_csv2023)


temparature_dictionary = {}

def create_temparature_dic(year,df_csv):
  for i in range(0,12):
    for j in range(0,31):
      month=str(i+1)
      day=str(j+1)
      if i+1<10:
        month='0'+month
      if j+1<10:
        day='0'+day
      if(df_csv.iloc[j,i+1]=='--'):
        temparature_dictionary[str(year)+'/'+month+'/'+day]=df_csv.iloc[31,i+1]
      else:
        temparature_dictionary[str(year)+'/'+month+'/'+day]=float(df_csv.iloc[j,i+1])

create_temparature_dic(108,temperature_csv2019)
create_temparature_dic(109,temperature_csv2020)
create_temparature_dic(110,temperature_csv2021)
create_temparature_dic(111,temperature_csv2022)
create_temparature_dic(112,temperature_csv2023)

temparature_dictionary

set1

set1=set1.drop(set1.index[:4])
set1=set1.drop(set1.index[-1])

import numpy as np

data_value = set1.values

set1

np.set_printoptions(threshold=np.inf)  # 將 threshold 設置為正無窮，以顯示所有內容
data_value

rain_dictionary[data_value[0][0]]

DATA=[]
for i in range (0,len(data_value)):
  if rain_dictionary[data_value[i][0]]!='--':
    temp=np.append(data_value[i],rain_dictionary[data_value[i][0]])
  else:
    temp=np.append(data_value[i],0)
  DATA.append(temp)
data_value=DATA

data_value[0]

DATA=[]
for i in range (0,len(data_value)):
  temp=np.append(data_value[i],temparature_dictionary[data_value[i][0]])
  DATA.append(temp)
data_value=DATA

data_value

data_value[0]

data=[]
for i in range(0,len(data_value)):
  temp=[data_value[i][6],data_value[i][11],data_value[i][12]]
  data.append(temp)

data

data=np.array(data)

data.shape

data[0]

holt_data=[]
for i in range(0,len(data)):
  holt_data.append(data[i][0])

holt_data=np.array(holt_data)

holt_data.shape

# dataframe opertations - pandas
import pandas as pd
# plotting data - matplotlib
from matplotlib import pyplot as plt
# time series - statsmodels
# Seasonality decomposition
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.seasonal import seasonal_decompose
# holt winters
# single exponential smoothing
from statsmodels.tsa.holtwinters import SimpleExpSmoothing
# double and triple exponential smoothing
from statsmodels.tsa.holtwinters import ExponentialSmoothing

holt_data

df = pd.DataFrame(holt_data, columns=['price'])
df['price'] = df['price'].astype(float)

df.shape

test

test

min_day=1000
max_day=1350
MSE_MAE_arr=[]
for days in range(min_day,max_day):
  MSE=0
  MAE=0
  train= df[days-120:days]
  test = df[days:days+60]
  fitted_model = ExponentialSmoothing(train['price'],trend='mul',seasonal='mul',seasonal_periods=60).fit()
  test_predictions = fitted_model.forecast(60)

  for j in range(days,days+60):
    MSE+=(test_predictions[j]-test['price'][j])**2
    MAE+=abs((test_predictions[j]-test['price'][j]))
  print("MSE:",MSE/60)
  print("MAE:",MAE/60)
  MSE_MAE_arr.append([MSE/60,MAE/60])

#MSE/=(60*((max_day-min_day)))
#MAE/=(60*((max_day-min_day)))

MSE_MAE_arr=np.array(MSE_MAE_arr)

print("MSE:",MSE_MAE_arr[:,0].sum()/len(MSE_MAE_arr))
print("MAE:",MSE_MAE_arr[:,1].sum()/len(MSE_MAE_arr))

#train['price'].plot(legend=True,label='TRAIN')
test['price'].plot(legend=True,label='TEST',figsize=(6,4))
test_predictions.plot(legend=True,label='PREDICTION')
plt.title('Train, Test and Predicted Test using Holt Winters')

holt_data

new_data=[]
for i in range(0, 1440, 30):
  sum=0
  for j in range(0,30):
    sum=sum+float(holt_data[i+j])
  sum=sum/30
  new_data.append(sum)

new_data

df = pd.DataFrame(new_data, columns=['price']) #一個月的平均price
df['price'] = df['price'].astype(float)

df['price'].plot(legend=True,label='data')

train= df[0:40]
test = df[40:]
fitted_model = ExponentialSmoothing(train['price'],trend='mul',seasonal='mul',seasonal_periods=12).fit()
test_predictions = fitted_model.forecast(8)

train['price'].plot(legend=True,label='TRAIN')
test['price'].plot(legend=True,label='TEST',figsize=(6,4))
test_predictions.plot(legend=True,label='PREDICTION')
plt.title('Train, Test and Predicted Test using Holt Winters')

set1

