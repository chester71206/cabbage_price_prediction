# -*- coding: utf-8 -*-
"""高麗菜專題六-varima-05-13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-tgb0vR7_Z01pnFAmrRJf8jFFmZ4hNYY
"""

import pandas as pd

# 讀取六個CSV檔案
set1 = pd.read_excel('Nantou_cabbage-108-112.xls')
weather_csv2019 = pd.read_csv('42HA10-2019-Precipitation-day.csv')
weather_csv2020 = pd.read_csv('42HA10-2020-Precipitation-day.csv')
weather_csv2021 = pd.read_csv('42HA10-2021-Precipitation-day.csv')
weather_csv2022 = pd.read_csv('42HA10-2022-Precipitation-day.csv')
weather_csv2023 = pd.read_csv('42HA10-2023-Precipitation-day.csv')

temperature_csv2019 = pd.read_csv('42HA10-2019-AirTemperature-day.csv')
temperature_csv2020 = pd.read_csv('42HA10-2020-AirTemperature-day.csv')
temperature_csv2021 = pd.read_csv('42HA10-2021-AirTemperature-day.csv')
temperature_csv2022 = pd.read_csv('42HA10-2022-AirTemperature-day.csv')
temperature_csv2023 = pd.read_csv('42HA10-2023-AirTemperature-day.csv')
rain_dictionary = {}

def create_rain_dic(year,df_csv):
  for i in range(0,12):
    for j in range(0,31):
      month=str(i+1)
      day=str(j+1)
      if i+1<10:
        month='0'+month
      if j+1<10:
        day='0'+day
      if(df_csv.iloc[j,i+1]=='--'):
        rain_dictionary[str(year)+'/'+month+'/'+day]=0.0
      else:
        rain_dictionary[str(year)+'/'+month+'/'+day]=float(df_csv.iloc[j,i+1])

create_rain_dic(108,weather_csv2019)
create_rain_dic(109,weather_csv2020)
create_rain_dic(110,weather_csv2021)
create_rain_dic(111,weather_csv2022)
create_rain_dic(112,weather_csv2023)


temparature_dictionary = {}

def create_temparature_dic(year,df_csv):
  for i in range(0,12):
    for j in range(0,31):
      month=str(i+1)
      day=str(j+1)
      if i+1<10:
        month='0'+month
      if j+1<10:
        day='0'+day
      if(df_csv.iloc[j,i+1]=='--'):
        temparature_dictionary[str(year)+'/'+month+'/'+day]=df_csv.iloc[31,i+1]
      else:
        temparature_dictionary[str(year)+'/'+month+'/'+day]=float(df_csv.iloc[j,i+1])

create_temparature_dic(108,temperature_csv2019)
create_temparature_dic(109,temperature_csv2020)
create_temparature_dic(110,temperature_csv2021)
create_temparature_dic(111,temperature_csv2022)
create_temparature_dic(112,temperature_csv2023)

set1=set1.drop(set1.index[:4])
set1=set1.drop(set1.index[-1])

import numpy as np

data_value = set1.values

DATA=[]
for i in range (0,len(data_value)):
  if rain_dictionary[data_value[i][0]]!='--':
    temp=np.append(data_value[i],rain_dictionary[data_value[i][0]])
  else:
    temp=np.append(data_value[i],0)
  DATA.append(temp)
data_value=DATA

DATA=[]
for i in range (0,len(data_value)):
  temp=np.append(data_value[i],temparature_dictionary[data_value[i][0]])
  DATA.append(temp)
data_value=DATA

data=[]
for i in range(0,len(data_value)):
  temp=[data_value[i][6],data_value[i][11],data_value[i][12]] #雨量
  data.append(temp)

data=[]
for i in range(0,len(data_value)):
  temp=[data_value[i][6],data_value[i][11],data_value[i][12]] #溫度
  data.append(temp)


data = pd.DataFrame(data, columns=['price', 'rainfall', 'temperature'])

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.api import VAR

data['price'] = pd.to_numeric(data['price'])
data['rainfall'] = pd.to_numeric(data['rainfall'])
data['temperature'] = pd.to_numeric(data['temperature'])
data['price_diff'] = data['price'].diff()
data.dropna(inplace=True)

import matplotlib.pyplot as plt

DAYS=1260
train=data[1200:DAYS]
test=data[DAYS:]

# 使用最优参数拟合模型
model = VARMAX(train[['price_diff', 'rainfall', 'temperature']],order=best_param)
results = model.fit(disp=False)
# 预测未来60天
forecast = results.get_forecast(steps=60)
forecast_diff = forecast.predicted_mean['price_diff']

# 获取最后一个已知的实际价格
last_actual_price = data['price'].iloc[-1]

# 差分还原
forecast_prices = np.r_[last_actual_price, forecast_diff].cumsum()
forecast_df = pd.DataFrame(forecast_prices, columns=['price'])

# 计算 MSE 和 MAE
MSE = np.mean((forecast_df['price'].values[:60] - test['price'].values[:60]) ** 2)
MAE = np.mean(np.abs(forecast_df['price'].values[:60] - test['price'].values[:60]))

print("MSE:", MSE)
print("MAE:", MAE)

# 绘制预测结果
forecast_series = pd.Series(forecast_df['price'].values[:60], name='predict')
test_series = pd.Series(test['price'].values[:60], name='test')
forecast_series.plot(legend=True, label='predict')
test_series.plot(legend=True, label='test')
plt.xlabel('days')
plt.ylabel('Price')
plt.legend()
plt.show()



data['price_diff'] = data['price'].diff().dropna()

from statsmodels.tsa.statespace.varmax import VARMAX
import itertools

# 定义参数范围
p = d = q = range(0, 3)
pdq = list(itertools.product(p, d, q))

# 寻找最优参数
best_aic = float("inf")
best_param = None

for param in pdq:
    try:
        model = VARMAX(data[['price_diff', 'rain', 'temperature']], order=param)
        results = model.fit(disp=False)
        if results.aic < best_aic:
            best_aic = results.aic
            best_param = param
    except:
        continue

print('Best AIC: %f' % best_aic)
print('Best parameters: %s' % str(best_param))

data['price_diff'] = data['price'].diff()
data.dropna(inplace=True)

from statsmodels.tsa.statespace.varmax import VARMAX
import itertools

# 定义较小的参数范围
p = q = range(0, 2)
pdq = list(itertools.product(p, q))

# 寻找最优参数
best_aic = float("inf")
best_param = None

for param in pdq:
    try:
        model = VARMAX(data[['price_diff', 'rainfall', 'temperature']], order=param)
        results = model.fit(disp=False)
        if results.aic < best_aic:
            best_aic = results.aic
            best_param = param
    except Exception as e:
        print(e)
        continue

print('Best AIC: %f' % best_aic)
print('Best parameters: %s' % str(best_param))

import matplotlib.pyplot as plt

# 使用最优参数拟合模型
model = VARMAX(data[['price_diff', 'rainfall', 'temperature']], order=best_param)
results = model.fit(disp=False)


# 预测未来60天
forecast = results.get_forecast(steps=60)
forecast_diff = forecast.predicted_mean['price_diff']

# 获取最后一个已知的实际价格
last_actual_price = data['price'].iloc[-1]

# 差分还原
forecast_prices = np.r_[last_actual_price, forecast_diff].cumsum()

# 绘制结果
plt.figure(figsize=(10, 5))
plt.plot(data.index, data['price'], label='Actual Prices')
plt.plot(pd.date_range(start=data.index[-1], periods=62, freq='D')[1:], forecast_prices, label='Forecast Prices')
plt.legend()
plt.title('Price Forecast')
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

from statsmodels.tsa.arima.model import ARIMA

# ARIMA模型
model = ARIMA(data['price'], order=(1, 1, 1))
results = model.fit()

# 预测未来60天
forecast = results.get_forecast(steps=60)
print(forecast.summary_frame())

plt.plot(data.index, data['price'], label='Actual Prices')
plt.plot(pd.date_range(start=data.index[-1], periods=62, freq='D')[1:], forecast_prices, label='Forecast Prices')
plt.legend()
plt.title('Price Forecast')
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

